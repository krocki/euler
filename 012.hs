-- @Author: krocki
-- @Date:   2016-12-17 13:04:05
-- @Last Modified by:   krocki
-- @Last Modified time: 2016-12-17 15:16:51

-- Highly divisible triangular number
-- 
-- Problem 12  
-- 
-- The sequence of triangle
-- numbers is generated by adding the natural numbers. So the 7th triangle
-- number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would
-- be:

-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

-- Let us list the factors of the first seven triangle numbers:

--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28

-- We can see that 28 is the first triangle number to have over five divisors.

-- What is the value of the first triangle number to have over five hundred
-- divisors?

-- listDivisors' 1000 1 [] = [1,2,4,5,8,10,20,25,40,50,100,125,200,250,500,1000]
listDivisors' :: Int -> Int -> [Int] -> [Int]
listDivisors' n x divisors
     | x*x < n && n `mod` x == 0 = [x] ++ listDivisors' n (x+1) divisors ++ [n `div` x]
     | x*x == n = [x] ++ listDivisors' n (x+1) divisors
     | x*x > n = []
     | otherwise = listDivisors' n (x+1) divisors

-- list all divisors of n
listDivisors :: Int -> [Int]
listDivisors n = listDivisors' n 1 []

triangleNums' :: [Int] -> Int -> [Int]
triangleNums' [] _ = [1]
triangleNums' prev max_divisors
       | length (listDivisors (last prev)) < max_divisors = triangleNums' (prev ++ [last prev + length prev + 1]) max_divisors
       | otherwise = prev

-- lists all triangle numbers whose divisor count is less than max_divisors
-- triangleNums = [1, 3, 6, ..]
triangleNums :: Int -> [Int]
triangleNums max_divisors = triangleNums' [1] max_divisors

-- TODO: come up with a faster solution
main = do
    let solution = last (triangleNums 500)
    print solution

